//
//  OCIApplication.m
//  ocimages
//
//  Created by Uli Kusterer on 29.07.17.
//  Copyright Â© 2017 Uli Kusterer. All rights reserved.
//

#import "OCIApplication.h"

@implementation OCIApplication

-(NSString*) stringAsIdentifier: (NSString*)keyString
{
	NSCharacterSet * nonIdentCS = [[NSCharacterSet characterSetWithCharactersInString: @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890_"] invertedSet];
	NSMutableString * identString = [keyString mutableCopy];
	NSRange foundRange = { 0, 0 };
	while ((foundRange = [identString rangeOfCharacterFromSet: nonIdentCS]).location != NSNotFound) {
		[identString replaceCharactersInRange: foundRange withString: @"_"];
	}
	while ((foundRange = [identString rangeOfString: @"__"]).location != NSNotFound) {
		[identString replaceCharactersInRange: foundRange withString: @"_"];
	}
	while ([identString rangeOfCharacterFromSet: [NSCharacterSet decimalDigitCharacterSet]].location == 0) { // Naughty! Identifiers may not start with a number!
		[identString replaceCharactersInRange: NSMakeRange(0, 1) withString: @"_"];
	}
	return identString;
}


-(NSString*) quotedString: (NSString*)inStr
{
	NSMutableString * quotedString = [inStr mutableCopy];
	[quotedString replaceOccurrencesOfString: @"\\" withString: @"\\\\" options:0 range: (NSRange){0,quotedString.length}];
	[quotedString replaceOccurrencesOfString: @"\"" withString: @"\\\"" options:0 range: (NSRange){0,quotedString.length}];
	[quotedString replaceOccurrencesOfString: @"\r" withString: @"\\r" options:0 range: (NSRange){0,quotedString.length}];
	[quotedString replaceOccurrencesOfString: @"\n" withString: @"\\n" options:0 range: (NSRange){0,quotedString.length}];
	[quotedString insertString: @"\"" atIndex: 0];
	[quotedString insertString: @"\"" atIndex: quotedString.length];
	return quotedString;
}


-(BOOL) openFile:(NSString *)filePath
{
	NSString * classPrefix = [[NSUserDefaults standardUserDefaults] objectForKey: @"-class-prefix"];
	if (!classPrefix) {
		classPrefix = @"";
	}

	NSString * catalogName = [classPrefix stringByAppendingString: filePath.lastPathComponent.stringByDeletingPathExtension];
	NSArray<NSString*>* fileTypes = @[ @"png", @"tiff", @"pdf", @"imageset", @"appiconset" ];
	NSMutableSet * files = [NSMutableSet set];
	NSDirectoryEnumerator * enny = [[NSFileManager defaultManager] enumeratorAtPath: filePath];
	if (!enny) {
		NSLog( @"Couldn't enumerate asset catalog/directory: %@", filePath );
		return NO;
	}
	
	for (NSString* currPath = enny.nextObject; currPath != nil; currPath = enny.nextObject) {
		if ([fileTypes containsObject: currPath.pathExtension.lowercaseString] ) {
			NSString * baseName = currPath.lastPathComponent.stringByDeletingPathExtension;
			if (![baseName hasSuffix: @"@2x"] && ![baseName hasSuffix: @"@3x"]) {
				[files addObject: baseName];
				[enny skipDescendants];	// Some of our supported formats are folders/packages.
			}
		}
	}
	
	NSMutableString * sourceFileContents = [NSMutableString string];
	NSMutableString * headerFileContents = [NSMutableString string];
	
	[headerFileContents appendFormat: @"// This file was auto-generated by ocimages from the catalog %1$@. Do not edit it,\n// instead, edit the catalog and run ocimages on it again.\n\n#import <Foundation/Foundation.h>\n\n", filePath.lastPathComponent];
	[sourceFileContents appendFormat: @"// This file was auto-generated by ocimages from the catalog %1$@. Do not edit it,\n// instead, edit the catalog and run ocimages on it again.\n\n#import \"%2$@.h\"\n\n", filePath.lastPathComponent, catalogName];
	
	for (NSString * imageName in files) {
		NSString * identName = [self stringAsIdentifier: imageName];
		[headerFileContents appendFormat: @"extern NSString * const %1$@%2$@;\n", catalogName, identName];
		[sourceFileContents appendFormat: @"NSString * const %1$@%2$@ = %3$@;\n", catalogName, identName, [self quotedString: imageName]];
	}
	
	NSError * err = nil;
	if (![headerFileContents writeToFile: [catalogName stringByAppendingString: @".h"] atomically: YES encoding: NSUTF8StringEncoding error: &err]) {
		NSLog(@"Can't write header: %@", err);
		return NO;
	}
	if (![sourceFileContents writeToFile: [catalogName stringByAppendingString: @".m"] atomically: YES encoding: NSUTF8StringEncoding error: &err]) {
		NSLog(@"Can't write source code: %@", err);
		return NO;
	}
	
	return YES;
}

@end
